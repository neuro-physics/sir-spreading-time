clearvars -except si
close all

addpath func

if exist('si','var') ~= 1
%     si = load('D:\Dropbox\p\postdoc\data\sirs\selected\N306\sim_data_alpha0.01_spTT_w.mat');
    si = load('D:\Dropbox\p\postdoc\data\sirs\selected\N306\sim_data_alpha0.01_spTT_w_comm_fix.mat');
else
    warning('*** using the variable si that is already in memory')
end

% newOutputDir = 'D:\Dropbox\p\postdoc\data\sirs\selected\figs\N306\figs_weiSpTime_spTT_fdr';
newOutputDir = 'D:\Dropbox\p\postdoc\artigos\spreading_dynamics\figs_2020-04_submission_2';
saveOutputFigures = false;
createDirIfDoesNotExist([newOutputDir,fullfile(newOutputDir,{'fig01','fig02','fig03'})]);

thetaInd = 4;
% useFDR = 2; % false, true, or 2; if useFDR == 2, show t-test figures
useFDR = true; % false, true, or 2; if useFDR == 2, show t-test figures
% useFDR = 0.8; % ####### SET showDataColor=2 ############### effect size threshold (see below)

effSizeLabel = 'Cohen_Mahal';
                % Cohen effect size threshold table (useFDR == effect size threshold)
                %Large        0.80    Cohen, 1988
                %Very large   1.20    Sawilowsky, 2009
                %Huge         2.00001     Sawilowsky, 2009
                % Sawilowsky, S (2009). "New effect size rules of thumb". Journal of Modern Applied Statistical Methods. 8 (2): 467–474. doi:10.22237/jmasm/1257035100. http://digitalcommons.wayne.edu/jmasm/vol8/iss2/26/

% effectSizeField = 'effsz';
                             % f sqr maybe? if it is f sqr, then
                             % f sqr >= 0.02 (small)
                             % f sqr >= 0.15 (medium)
                             % f sqr >= 0.35 (large) (Cohen 1988 book)  
                
% showDataColor = 2; % if showDataColor = 2 % color the effect sizes
showDataColor =  true; % ########### SET useFDR==TRUE ###################### color z-scores in the surface plots for nodes that pass the t-test
% showDataColor = false; % show only if z-score < or > than 0 for nodes that pass t-test in the surface map

showEffSizeDots = false;

%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%% 
%%%%%%%%%%%%%% the four variables below are used to decide which 'sim_data_*.mat' file (generated by processSpreadingData.m) should be used to plot the figure...
%%%%%%%%%%%%%% so in order to plot a figure with different configuration, you first need to process a new data set and then load it in plot_sim_data_func without relying
%%%%%%%%%%%%%% on the function plot_func.loadPlotData()
%%%%%%%%%%%%%% 
%%%%%%%%%%%%%%%%%%%%%%%%%%%

% t-value threshold
tThresh = 0;%[0.4,0.6];%[0.6,0.75,0.85]; % percent of the diff(abs(minmax(t))) (show only 1 - tThresh t-values)

% useBinarySpTime = true;
useBinarySpTime = false;

splitTTest = true;
% splitTTest = false;

% zScoreIndividually = true;
zScoreIndividually = false;

ttestOnAvg = true;
% ttestOnAvg = false;

showCommData = false;


[~,~,~,aal] = aalsurfview(zeros(90,1));
%cdb = load('D:\Dropbox\p\postdoc\data\TLE_NB_BB.mat');
[~,~,~,sub_L,sub_R] = findSubcorticalLabels(aal.labels.AAL306);
sub_L_labels = aal.labels.AAL306(sub_L);
sub_R_labels = aal.labels.AAL306(sub_R);

%% plotting node-wise spreading times for controls

cLim = minmax(cell2LinVec(getFieldsContents(si.LRTLE.SpMatrixW.controlData,{'SAvgR_node','SAvgS_node'},thetaInd)))+[-0.05,0.05];
cMap = [1,1,1;jet(306)];

[fh1,~,cb1] = aalsurfview(si.LRTLE.SpMatrixW.controlData.SAvgR_node{thetaInd},'Average control in/out spreading times',cMap,'continuous',...
    cLim,[],[],[],[],[],true,false);
[fh2,~,cb2] = aalsurfview(si.LRTLE.SpMatrixW.controlData.SAvgS_node{thetaInd},'Average control in/out spreading times',cMap,'continuous',...
    cLim,[],[],[],[],[],true,false);

cValues = round(cb1.Limits(1):2:cb1.Limits(2));%linspace(cb1.Limits(1),cb1.Limits(2),7);
cb1.Ticks = cValues;
cb1.TickLabels = strtrim(cellstr(num2str(cValues','%.3g'))');
cb1.TickLabels{1} = 'fast';
cb1.TickLabels{end} = 'slow';

cValues = round(cb2.Limits(1):2:cb2.Limits(2));%linspace(cb2.Limits(1),cb2.Limits(2),7);
cb2.Ticks = cValues;
cb2.TickLabels = strtrim(cellstr(num2str(cValues','%.3g'))');
cb2.TickLabels{1} = 'fast';
cb2.TickLabels{end} = 'slow';

if saveOutputFigures
    saveSubcorticalData(fullfile(newOutputDir,'subcortical_data_fig2A.mat'),...
        struct('S_sub_L_control_in',si.LRTLE.SpMatrixW.controlData.SAvgR_node{thetaInd}(sub_L),...
               'S_sub_R_control_in',si.LRTLE.SpMatrixW.controlData.SAvgR_node{thetaInd}(sub_R),...
               'S_sub_L_control_out',si.LRTLE.SpMatrixW.controlData.SAvgS_node{thetaInd}(sub_L),...
               'S_sub_R_control_out',si.LRTLE.SpMatrixW.controlData.SAvgS_node{thetaInd}(sub_R),...
               'labels_sub_L',{sub_L_labels},'labels_sub_R',{sub_R_labels},...
               'controls_color_lim',cLim,'controls_colormap',cMap),true);
    saveFigure([fh1,fh2],fullfile(newOutputDir,'fig02',{'controls_sptime_in','controls_sptime_out'}), 'tiff', true, {}, 600);
end

%% plotting Cohen effect size of patients vs controls

cLimEffSz_max = max(cell2LinVec(getFieldsContents(si.LRTLE.SpMatrixW.flip.ttest,...
                         {'SAvgR_node','SAvgR_CT_node','SAvgR_HV_node','SAvgS_node','SAvgS_CT_node','SAvgS_HV_node'},...
                         thetaInd,effSizeLabel,{'hFDR','h'},'($h$>0) & ($hFDR$>0)')));
cLimEffSz_min = min(cell2LinVec(getFieldsContents(si.LRTLE.SpMatrixW.flip.ttest,...
                         {'SAvgR_node','SAvgR_CT_node','SAvgR_HV_node','SAvgS_node','SAvgS_CT_node','SAvgS_HV_node'},...
                         thetaInd,effSizeLabel,{'hFDR','h'},'($h$>0) & ($hFDR$>0)')));
cLimEffSz = getCLim0(cLimEffSz_max,cLimEffSz_min);

d = si.LRTLE.SpMatrixW.flip.ttest.SAvgR_node(thetaInd).Cohen_Mahal;
d(~(si.LRTLE.SpMatrixW.flip.ttest.SAvgR_node(thetaInd).h & si.LRTLE.SpMatrixW.flip.ttest.SAvgR_node(thetaInd).hFDR)) = 0;
d(abs(d)<0.8) = 0;
d_in = d;
c = insertColorForVal(0,d,[1,1,1],flipud(greenYellowPinkCMap(numel(d))),greenYellowPinkCMap(numel(d)),[],cLimEffSz,numel(d));
[fh1,ax1,cb1] = aalsurfview(d,'Effect size (Cohen''s d)',c,'continuous',[],[],[],[],[],[],[],false);
cb1.TickLabels{1} = 'slower in TLE';

d = si.LRTLE.SpMatrixW.flip.ttest.SAvgS_node(thetaInd).Cohen_Mahal;
d(~(si.LRTLE.SpMatrixW.flip.ttest.SAvgS_node(thetaInd).h & si.LRTLE.SpMatrixW.flip.ttest.SAvgS_node(thetaInd).hFDR)) = 0;
d(abs(d)<0.8) = 0;
d_out = d;
c = insertColorForVal(0,d,[1,1,1],flipud(greenYellowPinkCMap(numel(d))),greenYellowPinkCMap(numel(d)),[],cLimEffSz,numel(d));
[fh2,ax2,cb2] = aalsurfview(d,'Effect size (Cohen''s d)',c,'continuous',[],[],[],[],[],[],[],false);
cb2.Limits = cb1.Limits;
cb2.TickLabels{1} = 'slower in TLE';

if saveOutputFigures
    saveSubcorticalData(fullfile(newOutputDir,'subcortical_data_fig2B.mat'),...
        struct('d_sub_L_in',d_in(sub_L),...
               'd_sub_R_in',d_in(sub_R),...
               'd_sub_L_out',d_out(sub_L),...
               'd_sub_R_out',d_out(sub_R),...
               'labels_sub_L',{sub_L_labels},'labels_sub_R',{sub_R_labels},...
               'd_color_lim',cLimEffSz,'d_colormap',c),true);
    saveFigure([fh1,fh2],fullfile(newOutputDir,'fig02',{'patients_in_sptime_effsz','patients_out_sptime_effsz'}), 'tiff', true, {}, 600);
end

%% plotting Cohen effect size of patients vs controls correcting for HV

cLimEffSz_max = max(cell2LinVec(getFieldsContents(si.LRTLE.SpMatrixW.flip.ttest,...
                         {'SAvgR_node','SAvgR_CT_node','SAvgR_HV_node','SAvgS_node','SAvgS_CT_node','SAvgS_HV_node'},...
                         thetaInd,effSizeLabel,{'hFDR','h'},'($h$>0) & ($hFDR$>0)')));
cLimEffSz_min = min(cell2LinVec(getFieldsContents(si.LRTLE.SpMatrixW.flip.ttest,...
                         {'SAvgR_node','SAvgR_CT_node','SAvgR_HV_node','SAvgS_node','SAvgS_CT_node','SAvgS_HV_node'},...
                         thetaInd,effSizeLabel,{'hFDR','h'},'($h$>0) & ($hFDR$>0)')));
cLimEffSz = getCLim0(cLimEffSz_max,cLimEffSz_min);

d = si.LRTLE.SpMatrixW.flip.ttest.SAvgR_HV_node(thetaInd).Cohen_Mahal;
d(~(si.LRTLE.SpMatrixW.flip.ttest.SAvgR_HV_node(thetaInd).h & si.LRTLE.SpMatrixW.flip.ttest.SAvgR_HV_node(thetaInd).hFDR)) = 0;
d(abs(d)<0.8) = 0;
d_in = d;
c = insertColorForVal(0,d,[1,1,1],flipud(greenYellowPinkCMap(numel(d))),greenYellowPinkCMap(numel(d)),[],cLimEffSz,numel(d));
[fh1,ax1,cb1] = aalsurfview(d,'Effect size (Cohen''s d)',c,'continuous',[],[],[],[],[],[],[],false);
cb1.TickLabels{1} = 'slower in TLE';

d = si.LRTLE.SpMatrixW.flip.ttest.SAvgS_HV_node(thetaInd).Cohen_Mahal;
d(~(si.LRTLE.SpMatrixW.flip.ttest.SAvgS_HV_node(thetaInd).h & si.LRTLE.SpMatrixW.flip.ttest.SAvgS_HV_node(thetaInd).hFDR)) = 0;
d(abs(d)<0.8) = 0;
d_out = d;
c = insertColorForVal(0,d,[1,1,1],flipud(greenYellowPinkCMap(numel(d))),greenYellowPinkCMap(numel(d)),[],cLimEffSz,numel(d));
[fh2,ax2,cb2] = aalsurfview(d,'Effect size (Cohen''s d)',c,'continuous',[],[],[],[],[],[],[],false);
cb2.Limits = cb1.Limits;
cb2.TickLabels{1} = 'slower in TLE';

if saveOutputFigures
    saveSubcorticalData(fullfile(newOutputDir,'subcortical_data_fig3A.mat'),...
        struct('d_sub_L_HV_in',d_in(sub_L),...
               'd_sub_R_HV_in',d_in(sub_R),...
               'd_sub_L_HV_out',d_out(sub_L),...
               'd_sub_R_HV_out',d_out(sub_R),...
               'labels_sub_L',{sub_L_labels},'labels_sub_R',{sub_R_labels},...
               'd_color_lim',cLimEffSz,'d_colormap',c),true);
    saveFigure([fh1,fh2],fullfile(newOutputDir,'fig03',{'patients_in_sptime_effsz_HV','patients_out_sptime_effsz_HV'}), 'tiff', true, {}, 600);
end

%% plotting Cohen effect size of patients vs controls correcting for CT

cLimEffSz_max = max(cell2LinVec(getFieldsContents(si.LRTLE.SpMatrixW.flip.ttest,...
                         {'SAvgR_node','SAvgR_CT_node','SAvgR_HV_node','SAvgS_node','SAvgS_CT_node','SAvgS_HV_node'},...
                         thetaInd,effSizeLabel,{'hFDR','h'},'($h$>0) & ($hFDR$>0)')));
cLimEffSz_min = min(cell2LinVec(getFieldsContents(si.LRTLE.SpMatrixW.flip.ttest,...
                         {'SAvgR_node','SAvgR_CT_node','SAvgR_HV_node','SAvgS_node','SAvgS_CT_node','SAvgS_HV_node'},...
                         thetaInd,effSizeLabel,{'hFDR','h'},'($h$>0) & ($hFDR$>0)')));
cLimEffSz = getCLim0(cLimEffSz_max,cLimEffSz_min);

d = si.LRTLE.SpMatrixW.flip.ttest.SAvgR_CT_node(thetaInd).Cohen_Mahal;
d(~(si.LRTLE.SpMatrixW.flip.ttest.SAvgR_CT_node(thetaInd).h & si.LRTLE.SpMatrixW.flip.ttest.SAvgR_CT_node(thetaInd).hFDR)) = 0;
d(abs(d)<0.8) = 0;
d_in = d;
c = insertColorForVal(0,d,[1,1,1],flipud(greenYellowPinkCMap(numel(d))),greenYellowPinkCMap(numel(d)),[],cLimEffSz,numel(d));
[fh1,ax1,cb1] = aalsurfview(d,'Effect size (Cohen''s d)',c,'continuous',[],[],[],[],[],[],[],false);
cb1.TickLabels{1} = 'slower in TLE';

d = si.LRTLE.SpMatrixW.flip.ttest.SAvgS_CT_node(thetaInd).Cohen_Mahal;
d(~(si.LRTLE.SpMatrixW.flip.ttest.SAvgS_CT_node(thetaInd).h & si.LRTLE.SpMatrixW.flip.ttest.SAvgS_CT_node(thetaInd).hFDR)) = 0;
d(abs(d)<0.8) = 0;
d_out = d;
c = insertColorForVal(0,d,[1,1,1],flipud(greenYellowPinkCMap(numel(d))),greenYellowPinkCMap(numel(d)),[],cLimEffSz,numel(d));
[fh2,ax2,cb2] = aalsurfview(d,'Effect size (Cohen''s d)',c,'continuous',[],[],[],[],[],[],[],false);
cb2.Limits = cb1.Limits;
cb2.TickLabels{1} = 'slower in TLE';

if saveOutputFigures
    saveSubcorticalData(fullfile(newOutputDir,'subcortical_data_fig3C.mat'),...
        struct('d_sub_L_CT_in',d_in(sub_L),...
               'd_sub_R_CT_in',d_in(sub_R),...
               'd_sub_L_CT_out',d_out(sub_L),...
               'd_sub_R_CT_out',d_out(sub_R),...
               'labels_sub_L',{sub_L_labels},'labels_sub_R',{sub_R_labels},...
               'd_color_lim',cLimEffSz,'d_colormap',c),true);
    saveFigure([fh1,fh2],fullfile(newOutputDir,'fig03',{'patients_in_sptime_effsz_CT','patients_out_sptime_effsz_CT'}), 'tiff', true, {}, 600);
end

%% configuring variables for MTL surface plots

commLabels = si.LRTLE.commLabel_Yeo;

tbc = 'none'; % 'none' -> std t-test; 'CT' -> t-test controlling for CT; 'HV' -> t-test controlling for HV
newOutputDir = 'D:\Dropbox\p\postdoc\data\sirs\selected\figs\N306\figs_weiSpTime_spTT_fdr';
oFileSuffix = '';
N = 306; % size of the parcellation of the main results
sortNodesBy = 'func';
panelTitle = 'Spreading Time (Z-Score W.r.t. Controls)';
cMap_minus = autumn(size(get(groot,'DefaultFigureColormap'),1)); % good for Z(S_p) - Z(S_c)
cMap_plus = flipud(winter(size(get(groot,'DefaultFigureColormap'),1))); % good for Z(S_p) - Z(S_c)
cLim = minmax([cell2LinVec(getFieldsContents(si.LRTLE.SpMatrixW.controlData,{'SAvgR_node','SAvgS_node','SAvgRS_node'},thetaInd)),cell2LinVec(getFieldsContents(si.LRTLE.SpMatrixW.patientData,{'SAvgR_node','SAvgS_node','SAvgRS_node'},thetaInd))]);
cLimTrends_max = max(abs(cell2LinVec(getFieldsContents(si.LRTLE.SpMatrixW.flip.ttest,...
                         {'SAvgR_node','SAvgR_CT_node','SAvgR_HV_node','SAvgS_node','SAvgS_CT_node','SAvgS_HV_node'},...
                         thetaInd,'t',{'hFDR','h'},'($h$>0) & ($hFDR$==0)'))));
cLimTrends_min = min(abs(cell2LinVec(getFieldsContents(si.LRTLE.SpMatrixW.flip.ttest,...
                         {'SAvgR_node','SAvgR_CT_node','SAvgR_HV_node','SAvgS_node','SAvgS_CT_node','SAvgS_HV_node'},...
                         thetaInd,'t',{'hFDR','h'},'($h$>0) & ($hFDR$==0)'))));
cLimTrends = getCLim0(cLimTrends_max,cLimTrends_min);
cLimEffSz_max = max(cell2LinVec(getFieldsContents(si.LRTLE.SpMatrixW.flip.ttest,...
                         {'SAvgR_node','SAvgR_CT_node','SAvgR_HV_node','SAvgS_node','SAvgS_CT_node','SAvgS_HV_node'},...
                         thetaInd,effSizeLabel,{'hFDR','h'},'($h$>0) & ($hFDR$>0)')));
cLimEffSz_min = min(cell2LinVec(getFieldsContents(si.LRTLE.SpMatrixW.flip.ttest,...
                         {'SAvgR_node','SAvgR_CT_node','SAvgR_HV_node','SAvgS_node','SAvgS_CT_node','SAvgS_HV_node'},...
                         thetaInd,effSizeLabel,{'hFDR','h'},'($h$>0) & ($hFDR$>0)')));
cLimEffSz = getCLim0(cLimEffSz_max,cLimEffSz_min);
if tThresh > 0
    tTestColorProp = { 'ColorArr', [0.3,0.3,0.3;1,1,1;jet(N)], 'ShowDataColor', showDataColor, 'ColorMode', 'discrete' };
else
    tTestColorProp = { 'ColorArr', [1,1,1;jet(N)], 'ShowDataColor', showDataColor, 'ColorMode', 'continuous' };
end
tTestColorPropL = [tTestColorProp,'ColorLim1',cLim,'ColorLimT',cLimTrends,'ColorLimEf',cLimEffSz];
nodeLabelsXAxis = {};
if showCommData
    nodeLabelsXAxis = commLabels;
end

%% plotting controls MTL surface

cLim = minmax(cell2LinVec(getFieldsContents(si.LRTLE.SpMatrixW.controlData,{'SZS_mtlL','SZR_mtlL'},thetaInd)));
tTestColorPropL = [tTestColorProp,'ColorLim1',cLim,'ColorLimT',cLimTrends,'ColorLimEf',cLimEffSz];

fh = gobjects(1,2);
cb = gobjects(1,2);
[fh(1),~,~,~,~,cb(1),~,~] = plotSpMatrixSurface(si.LRTLE.SpMatrixW, [{'SZStdS_mtlL','SZS_mtlL'},getTTestLabel(tbc,'SZS_mtlL')], thetaInd, '', panelTitle,...
    tTestColorPropL, 'file', [shrinkStrByCapLetters(si.LRTLE.SpMatrixW.mtlLabL),'_spt_ttest',oFileSuffix,'_label.txt'], useFDR, si.LRTLE.SpMatrixW.mtlLabL, 'raw', true, sortNodesBy, nodeLabelsXAxis, tThresh, [], true, true);
[fh(2),~,~,~,~,cb(2),~,~] = plotSpMatrixSurface(si.LRTLE.SpMatrixW, [{'SZStdR_mtlL','SZR_mtlL'},getTTestLabel(tbc,'SZR_mtlL')], thetaInd, '', panelTitle,...
    tTestColorPropL, 'file', [shrinkStrByCapLetters(si.LRTLE.SpMatrixW.mtlLabL),'_spt_ttest',oFileSuffix,'_label.txt'], useFDR, si.LRTLE.SpMatrixW.mtlLabL, 'raw', true, sortNodesBy, nodeLabelsXAxis, tThresh, [], true, true);
if numel(cb(1).Ticks) < 7
    cValues = cb(1).Limits(1):5:cb(1).Limits(2);%linspace(cb(1).Limits(1),cb(1).Limits(2),7);
    cb(1).Ticks = cValues;
    cb(1).TickLabels = strtrim(cellstr(num2str(cValues','%.2g'))');
end
if numel(cb(2).Ticks) < 7
    cValues = cb(2).Limits(1):5:cb(2).Limits(2);%linspace(cb(2).Limits(1),cb(2).Limits(2),7);
    cb(2).Ticks = cValues;
    cb(2).TickLabels = strtrim(cellstr(num2str(cValues','%.2g'))');
end
%             if showDataColor && islogical(showDataColor)
cb(1).TickLabels{1} = 'faster';
cb(1).TickLabels{end} = 'slower';
cb(2).TickLabels{1} = 'faster';
cb(2).TickLabels{end} = 'slower';

cb(1).Title.String = 'Control MTL In/Out spreading times';
cb(2).Title.String = 'Control MTL In/Out spreading times';
%             end
drawnow

if saveOutputFigures
    fn = [getFigureFileNames(newOutputDir, [shrinkStrByCapLetters(si.LRTLE.SpMatrixW.mtlLabL),'_spt_out_raw',oFileSuffix,'_theta'], si.LRTLE.SpMatrixW.theta(thetaInd)),...
          getFigureFileNames(newOutputDir, [shrinkStrByCapLetters(si.LRTLE.SpMatrixW.mtlLabL),'_spt_in_raw',oFileSuffix,'_theta'], si.LRTLE.SpMatrixW.theta(thetaInd))];
    saveFigure(fh, fn, 'tiff', true, [], 600);
end

%% plotting patients effect size MTL

tTestColorProp = { 'ColorArr', [1,1,1;jet(N)], 'ShowDataColor', 2, 'ColorMode', 'continuous' };
tTestColorPropL = [tTestColorProp,'ColorLim1',cLim,'ColorLimT',cLimTrends,'ColorLimEf',cLimEffSz];
useFDR = 0.8; % threshold for the Cohen d values

fh = gobjects(1,2);
cb = gobjects(1,2);
[fh(1),~,~,~,~,cb(1),~,~] = plotSpMatrixSurface(si.LRTLE.SpMatrixW.flip, [{'SZStdS_mtlL','SZS_mtlL'},getTTestLabel(tbc,'SZS_mtlL')], thetaInd, '', panelTitle,...
    tTestColorPropL, 'file', [shrinkStrByCapLetters(si.LRTLE.SpMatrixW.flip.mtlLabL),'_spt_ttest',oFileSuffix,'_label.txt'], useFDR, si.LRTLE.SpMatrixW.flip.mtlLabL, 'ttest', true, sortNodesBy, nodeLabelsXAxis, tThresh, [], true, true);
[fh(2),~,~,~,~,cb(2),~,~] = plotSpMatrixSurface(si.LRTLE.SpMatrixW.flip, [{'SZStdR_mtlL','SZR_mtlL'},getTTestLabel(tbc,'SZR_mtlL')], thetaInd, '', panelTitle,...
    tTestColorPropL, 'file', [shrinkStrByCapLetters(si.LRTLE.SpMatrixW.flip.mtlLabL),'_spt_ttest',oFileSuffix,'_label.txt'], useFDR, si.LRTLE.SpMatrixW.flip.mtlLabL, 'ttest', true, sortNodesBy, nodeLabelsXAxis, tThresh, [], true, true);
cb(1).TickLabels{1} = 'slower in TLE';
cb(2).Limits = cb(1).Limits;
cb(2).TickLabels{1} = 'slower in TLE';

cb(1).Title.String = 'MTL Effect size (Cohen''s d)';
cb(2).Title.String = 'MTL Effect size (Cohen''s d)';
%             end
drawnow

if saveOutputFigures
    fn = [getFigureFileNames(newOutputDir, [shrinkStrByCapLetters(si.LRTLE.SpMatrixW.mtlLabL),'_spt_out_effsz',oFileSuffix,'_theta'], si.LRTLE.SpMatrixW.theta(thetaInd)),...
          getFigureFileNames(newOutputDir, [shrinkStrByCapLetters(si.LRTLE.SpMatrixW.mtlLabL),'_spt_in_effsz',oFileSuffix,'_theta'], si.LRTLE.SpMatrixW.theta(thetaInd))];
    saveFigure(fh, fn, 'tiff', true, [], 600);
end

%% plotting patients effect size MTL correcting for HV

% cLim = minmax([cell2LinVec(getFieldsContents(si.LRTLE.SpMatrixW.flip.controlData,{'SAvgR_node','SAvgS_node','SAvgRS_node'},thetaInd)),cell2LinVec(getFieldsContents(si.LRTLE.SpMatrixW.flip.patientData,{'SAvgR_node','SAvgS_node','SAvgRS_node'},thetaInd))]);
% tTestColorProp = { 'ColorArr', [1,1,1;jet(N)], 'ShowDataColor', true, 'ColorMode', 'continuous' };
% tTestColorPropL = [tTestColorProp,'ColorLim1',cLim,'ColorLimT',cLimTrends,'ColorLimEf',cLimEffSz];
% useFDR = true;%0.8; % threshold for the Cohen d values
tTestColorProp = { 'ColorArr', [1,1,1;jet(N)], 'ShowDataColor', 2, 'ColorMode', 'continuous' };
tTestColorPropL = [tTestColorProp,'ColorLim1',cLim,'ColorLimT',cLimTrends,'ColorLimEf',cLimEffSz];
useFDR = 0.8; % threshold for the Cohen d values
tbc = 'HV';

fh = gobjects(1,2);
cb = gobjects(1,2);
[fh(1),~,~,~,~,cb(1),~,~] = plotSpMatrixSurface(si.LRTLE.SpMatrixW.flip, [{'SZStdS_mtlL','SZS_mtlL'},getTTestLabel(tbc,'SZS_mtlL')], thetaInd, '', panelTitle,...
    tTestColorPropL, 'file', [shrinkStrByCapLetters(si.LRTLE.SpMatrixW.flip.mtlLabL),'_spt_ttest',oFileSuffix,'_label.txt'], useFDR, si.LRTLE.SpMatrixW.flip.mtlLabL, 'ttest', true, sortNodesBy, nodeLabelsXAxis, tThresh, [], true, true, false);
[fh(2),~,~,~,~,cb(2),~,~] = plotSpMatrixSurface(si.LRTLE.SpMatrixW.flip, [{'SZStdR_mtlL','SZR_mtlL'},getTTestLabel(tbc,'SZR_mtlL')], thetaInd, '', panelTitle,...
    tTestColorPropL, 'file', [shrinkStrByCapLetters(si.LRTLE.SpMatrixW.flip.mtlLabL),'_spt_ttest',oFileSuffix,'_label.txt'], useFDR, si.LRTLE.SpMatrixW.flip.mtlLabL, 'ttest', true, sortNodesBy, nodeLabelsXAxis, tThresh, [], true, true, false);
%cb(1).TickLabels{1} = 'slower in TLE';
%cb(2).Limits = cb(1).Limits;
%cb(2).TickLabels{1} = 'slower in TLE';

cb(1).Title.String = 'MTL Effect size (Cohen''s d)';
cb(2).Title.String = 'MTL Effect size (Cohen''s d)';
%             end
drawnow

if saveOutputFigures
    fn = [getFigureFileNames(newOutputDir, [shrinkStrByCapLetters(si.LRTLE.SpMatrixW.mtlLabL),'_spt_out_effsz_HV',oFileSuffix,'_theta'], si.LRTLE.SpMatrixW.theta(thetaInd)),...
          getFigureFileNames(newOutputDir, [shrinkStrByCapLetters(si.LRTLE.SpMatrixW.mtlLabL),'_spt_in_effsz_HV',oFileSuffix,'_theta'], si.LRTLE.SpMatrixW.theta(thetaInd))];
    saveFigure(fh, fn, 'tiff', true, [], 600);
end

%% plotting patients effect size MTL correcting for CT

% cLim = minmax([cell2LinVec(getFieldsContents(si.LRTLE.SpMatrixW.flip.controlData,{'SAvgR_node','SAvgS_node','SAvgRS_node'},thetaInd)),cell2LinVec(getFieldsContents(si.LRTLE.SpMatrixW.flip.patientData,{'SAvgR_node','SAvgS_node','SAvgRS_node'},thetaInd))]);
% tTestColorProp = { 'ColorArr', [1,1,1;jet(N)], 'ShowDataColor', true, 'ColorMode', 'continuous' };
% tTestColorPropL = [tTestColorProp,'ColorLim1',cLim,'ColorLimT',cLimTrends,'ColorLimEf',cLimEffSz];
% useFDR = true;%0.8; % threshold for the Cohen d values
tTestColorProp = { 'ColorArr', [1,1,1;jet(N)], 'ShowDataColor', 2, 'ColorMode', 'continuous' };
tTestColorPropL = [tTestColorProp,'ColorLim1',cLim,'ColorLimT',cLimTrends,'ColorLimEf',cLimEffSz];
useFDR = 0.8; % threshold for the Cohen d valu
tbc = 'CT';

fh = gobjects(1,2);
cb = gobjects(1,2);
[fh(1),~,~,~,~,cb(1),~,~] = plotSpMatrixSurface(si.LRTLE.SpMatrixW.flip, [{'SZStdS_mtlL','SZS_mtlL'},getTTestLabel(tbc,'SZS_mtlL')], thetaInd, '', panelTitle,...
    tTestColorPropL, 'file', [shrinkStrByCapLetters(si.LRTLE.SpMatrixW.flip.mtlLabL),'_spt_ttest',oFileSuffix,'_label.txt'], useFDR, si.LRTLE.SpMatrixW.flip.mtlLabL, 'ttest', true, sortNodesBy, nodeLabelsXAxis, tThresh, [], true, true, false);
[fh(2),~,~,~,~,cb(2),~,~] = plotSpMatrixSurface(si.LRTLE.SpMatrixW.flip, [{'SZStdR_mtlL','SZR_mtlL'},getTTestLabel(tbc,'SZR_mtlL')], thetaInd, '', panelTitle,...
    tTestColorPropL, 'file', [shrinkStrByCapLetters(si.LRTLE.SpMatrixW.flip.mtlLabL),'_spt_ttest',oFileSuffix,'_label.txt'], useFDR, si.LRTLE.SpMatrixW.flip.mtlLabL, 'ttest', true, sortNodesBy, nodeLabelsXAxis, tThresh, [], true, true, false);
% cb(1).TickLabels{1} = 'slower in TLE';
% cb(2).Limits = cb(1).Limits;
cb(2).TickLabels{1} = 'slower in TLE';

cb(1).Title.String = 'MTL Effect size (Cohen''s d)';
cb(2).Title.String = 'MTL Effect size (Cohen''s d)';
%             end
drawnow

if saveOutputFigures
    fn = [getFigureFileNames(newOutputDir, [shrinkStrByCapLetters(si.LRTLE.SpMatrixW.mtlLabL),'_spt_out_effsz_CT',oFileSuffix,'_theta'], si.LRTLE.SpMatrixW.theta(thetaInd)),...
          getFigureFileNames(newOutputDir, [shrinkStrByCapLetters(si.LRTLE.SpMatrixW.mtlLabL),'_spt_in_effsz_CT',oFileSuffix,'_theta'], si.LRTLE.SpMatrixW.theta(thetaInd))];
    saveFigure(fh, fn, 'tiff', true, [], 600);
end

%% plotting func community sp time

commLabels = si.LRTLE.commLabel_Yeo;
oFileSuffix = '';
N = 306; % size of the parcellation of the main results
sortNodesBy = 'func';
panelTitle = 'Spreading Time (Z-Score W.r.t. Controls)';
[~,commLabelsAbbrev] = shrinkStrByCapLetters(commLabels,1);
ttestLabel = 'SZ';
tbc = 'none';
if ~strcmpi(tbc,'none')
    ttestLabel = [ttestLabel,'_',tbc];
end
matrixView = 'full';
useFDR = true;
showDataColor = true;
showCommSurf = true;
% showCommSurf = false;
showControlsOnly = true;
[fh,axh,cb] = plotCommMatrixWithSurf(si.LRTLE.CommSpMatrixW,thetaInd,ttestLabel,commLabelsAbbrev,tThresh,panelTitle,matrixView,showDataColor,effSizeLabel,useFDR,showCommSurf,showControlsOnly);
fh = cropFigure(fh,10);
fh.Children(end-1).Position = [0.451 0.1234 0.401 0.0178];
fh.Children(end-1).Title.String = 'Average control spreading time, S';
if saveOutputFigures
    fn = getFigureFileNames(newOutputDir, ['sptime_comm_matrix',oFileSuffix,'_theta'], si.LRTLE.CommSpMatrixW.theta(thetaInd));
    saveFigure(fh, fn, 'tiff', true, [], 600);
    %moveManyFiles(labFile,newOutputDir);
end

%% plotting func community sp time effect size

commLabels = si.LRTLE.commLabel_Yeo;
oFileSuffix = '';
N = 306; % size of the parcellation of the main results
sortNodesBy = 'func';
panelTitle = 'Spreading Time (Z-Score W.r.t. Controls)';
[~,commLabelsAbbrev] = shrinkStrByCapLetters(commLabels,1);
ttestLabel = 'SZ';
tbc = 'none';
if ~strcmpi(tbc,'none')
    ttestLabel = [ttestLabel,'_',tbc];
end
matrixView = 'full';
useFDR = 0.8;
showDataColor = 2;
showCommSurf = true;
[fh,axh,cb] = plotCommMatrixWithSurf(si.LRTLE.CommSpMatrixW.flip,thetaInd,ttestLabel,commLabelsAbbrev,tThresh,panelTitle,matrixView,showDataColor,effSizeLabel,useFDR,showCommSurf,[],showEffSizeDots);
fh = cropFigure(fh,10);
fh.Children(end-1).Position = [0.451 0.1234 0.401 0.0178];
fh.Children(end-1).Title.String = 'Effect size (Cohen''s d)';
if saveOutputFigures
    saveFigure(fh, fullfile(newOutputDir,'fig02','sptime_effsz_comm_matrix'), 'tiff', true, [], 600);
    %moveManyFiles(labFile,newOutputDir);
end

%% plotting func community sp time effect size correcting for HV

commLabels = si.LRTLE.commLabel_Yeo;
oFileSuffix = '';
N = 306; % size of the parcellation of the main results
sortNodesBy = 'func';
panelTitle = 'Spreading Time (Z-Score W.r.t. Controls)';
[~,commLabelsAbbrev] = shrinkStrByCapLetters(commLabels,1);
ttestLabel = 'SZ';
tbc = 'HV';
if ~strcmpi(tbc,'none')
    ttestLabel = [ttestLabel,'_',tbc];
end
matrixView = 'full';
useFDR = 0.8;
showDataColor = 2;
showCommSurf = true;
[fh,axh,cb] = plotCommMatrixWithSurf(si.LRTLE.CommSpMatrixW.flip,thetaInd,ttestLabel,commLabelsAbbrev,tThresh,panelTitle,matrixView,showDataColor,effSizeLabel,useFDR,showCommSurf,[],showEffSizeDots);
fh = cropFigure(fh,10);
fh.Children(end-1).Position = [0.451 0.1234 0.401 0.0178];
fh.Children(end-1).Title.String = 'Effect size (Cohen''s d)';
if saveOutputFigures
    saveFigure(fh, fullfile(newOutputDir, 'fig03', 'sptime_effsz_comm_matrix_HV'), 'tiff', true, [], 600);
    %moveManyFiles(labFile,newOutputDir);
end

%% plotting func community sp time effect size correcting for CT

commLabels = si.LRTLE.commLabel_Yeo;
oFileSuffix = '';
N = 306; % size of the parcellation of the main results
sortNodesBy = 'func';
panelTitle = 'Spreading Time (Z-Score W.r.t. Controls)';
[~,commLabelsAbbrev] = shrinkStrByCapLetters(commLabels,1);
ttestLabel = 'SZ';
tbc = 'CT';
if ~strcmpi(tbc,'none')
    ttestLabel = [ttestLabel,'_',tbc];
end
matrixView = 'full';
useFDR = 0.8;
showDataColor = 2;
showCommSurf = true;
[fh,axh,cb] = plotCommMatrixWithSurf(si.LRTLE.CommSpMatrixW.flip,thetaInd,ttestLabel,commLabelsAbbrev,tThresh,panelTitle,matrixView,showDataColor,effSizeLabel,useFDR,showCommSurf,[],showEffSizeDots);
fh = cropFigure(fh,10);
fh.Children(end-1).Position = [0.451 0.1234 0.401 0.0178];
fh.Children(end-1).Title.String = 'Effect size (Cohen''s d)';
if saveOutputFigures
    saveFigure(fh, fullfile(newOutputDir, 'fig03', 'sptime_effsz_comm_matrix_CT'), 'tiff', true, [], 600);
    %moveManyFiles(labFile,newOutputDir);
end

%% plotting spiderplot of spreading times from MTL lobes towards func communities

commLabels = si.LRTLE.commLabel_Yeo;
oFileSuffix = '';
nMTL = numel(si.LRTLE.SpMatrixW.flip.mtlLabL);  
nLabelL = cellfun(@(x)shrinkStrByCapLetters(x),si.LRTLE.SpMatrixW.flip.mtlLabL,'UniformOutput',false);
[~,commLabelsAbbrev] = shrinkStrByCapLetters(commLabels,1);
showEffectSizes = 2;
useFDR = 0.8;
legendTxtL = ['Controls',nLabelL];
colorToAdd = [0,0,0];
if showEffectSizes == 2
    legendTxtL = nLabelL;
    colorToAdd = [];
end
[P,PStd,axLabel,~,axLabelStr,colNames,colLeg,r_T,r_FDR,r_Ef,r_CT,r_HV] =...
    prepare_si_spider_data(si.LRTLE.SpMatrixW.flip,{'SZ_mtlL_comm','SZStd_mtlL_comm','ttest_SZ_mtlL_comm_CT','ttest_SZ_mtlL_comm_HV'},thetaInd,commLabelsAbbrev,1:nMTL,[],[],true,true,showEffectSizes,effSizeLabel,useFDR,true,legendTxtL);
% for showing actual sptime data (no effect size)
%P(:,strcmpi(colNames,'d')) = [];
%PStd(:,strcmpi(colNames,'d')) = [];
if showEffectSizes == 2
    % for showing only effect sizes
    k1 = find(strcmpi(colNames,'Controls')|strcmpi(colNames,'Patients'));
    k2 = find(strcmpi(colNames,'Controls'));
    P(:,k1) = [];
    r_T(:,k2) = [];
    r_FDR(:,k2) = [];
    r_Ef(:,k2) = [];
    r_CT(:,k2) = [];
    r_HV(:,k2) = [];
    PStd = [];
    colLeg(strcmpi(colLeg,'Controls'))=[];
end
panelLabels = cellfun(@(x)['\theta=', thetaValToTxt(x)],num2cell(si.LRTLE.SpMatrixW.flip.theta(thetaInd)),'UniformOutput',false);
%fh = plot_si_spider([],[],P,PStd,axLabel,panelLabels,'',colLeg,[],colorToAdd,0.1,{},r_T,r_FDR,0.02,5*pi/180);
fh1 = plot_si_spider([],[],P,PStd,axLabel,panelLabels,'',colLeg,[],colorToAdd,0.1,{},[],r_FDR&r_Ef,0.02,-2.5*pi/180);
fn1 = fullfile(newOutputDir,['MTL-L_sptime_comm',oFileSuffix]);
ax = gca;
ax.Title.String = '';
lh = legend(ax,'Position',[0.0060 0.0136 0.3672 0.1708]);
[~,ind] = intersect(legendTxtL,lh.String);
lh.String = cellfun(@(x)x{1},cellfun(@(x)strsplit(x,'_'),si.LRTLE.SpMatrixW.flip.mtlLabL(ind),'UniformOutput',false),'UniformOutput',false);

fh2 = plot_si_spider([],[],P,PStd,axLabel,panelLabels,'',colLeg,[],colorToAdd,0.1,{},[],r_CT&r_Ef,0.02,-2.5*pi/180,'+x');
fn2 = fullfile(newOutputDir,['MTL-L_sptime_comm_CT',oFileSuffix]);
ax = gca;
ax.Title.String = '';
lh = legend(ax,'Position',[0.0060 0.0136 0.3672 0.1708]);
[~,ind] = intersect(legendTxtL,lh.String);
lh.String = cellfun(@(x)x{1},cellfun(@(x)strsplit(x,'_'),si.LRTLE.SpMatrixW.flip.mtlLabL(ind),'UniformOutput',false),'UniformOutput',false);

fh3 = plot_si_spider([],[],P,PStd,axLabel,panelLabels,'',colLeg,[],colorToAdd,0.1,{},[],r_HV&r_Ef,0.02,-2.5*pi/180,'+h');
fn3 = fullfile(newOutputDir,['MTL-L_sptime_comm_HV',oFileSuffix]);
ax = gca;
ax.Title.String = '';
lh = legend(ax,'Position',[0.0060 0.0136 0.3672 0.1708]);
[~,ind] = intersect(legendTxtL,lh.String);
lh.String = cellfun(@(x)x{1},cellfun(@(x)strsplit(x,'_'),si.LRTLE.SpMatrixW.flip.mtlLabL(ind),'UniformOutput',false),'UniformOutput',false);

if saveOutputFigures
    saveFigure([fh1,fh2,fh3], {fn1,fn2,fn3}, 'tiff', true, [], 600);
end

%% plotting in/out sp times as bars

fp = getDefaultFigureProperties();
[~,~,~,aal] = aalsurfview(zeros(90,1));
ind = find(contains(aal.labels.AAL306,'ParaHippocampal_L') | contains(aal.labels.AAL306,'Hippocampus_L') | contains(aal.labels.AAL306,'Amygdala_L'));
lab = aal.labels.AAL306(ind);
indPara = find(contains(lab,'ParaHippocampal'));

[spTime_in,k ] = replaceLinesByFunc(si.LRTLE.SpMatrixW.flip.patientData.SAvgR_node{thetaInd}(ind),indPara,1);
spTime_out = replaceLinesByFunc(si.LRTLE.SpMatrixW.flip.patientData.SAvgS_node{thetaInd}(ind),indPara,1);
spTimeStd_in  = replaceLinesByFunc(si.LRTLE.SpMatrixW.flip.patientData.SStdR_node{thetaInd}(ind),indPara,1,@(x)sqrt(mean(x.^2,1,'omitnan'))) ./ sqrt(306); % replaceLinesByFunc(sqrt(mean((si.LRTLE.SpMatrixW.flip.patientData.SZStd{4}(:,ind)').^2,2,'omitnan')),indPara,1,@(x)sqrt(mean(x.^2,1,'omitnan')));
spTimeStd_out = replaceLinesByFunc(si.LRTLE.SpMatrixW.flip.patientData.SStdS_node{thetaInd}(ind),indPara,1,@(x)sqrt(mean(x.^2,1,'omitnan'))) ./ sqrt(306); % replaceLinesByFunc(sqrt(mean((si.LRTLE.SpMatrixW.flip.patientData.SZStd{4}(ind,:)).^2,2,'omitnan')),indPara,1,@(x)sqrt(mean(x.^2,1,'omitnan')));
efSz_in  = abs(replaceLinesByFunc(si.LRTLE.SpMatrixW.flip.ttest.SAvgR_node(thetaInd).Cohen_Mahal(ind)',indPara,1,@(x)max(x,[],1)));
efSz_out = abs(replaceLinesByFunc(si.LRTLE.SpMatrixW.flip.ttest.SAvgS_node(thetaInd).Cohen_Mahal(ind)',indPara,1,@(x)max(x,[],1)));

hEf_in = double(efSz_in>=0.8);
hEf_out = double(efSz_out>=0.8);
h_in  = double(replaceLinesByFunc(si.LRTLE.SpMatrixW.flip.ttest.SAvgR_node(thetaInd).h(ind)' == 1,indPara,1,@(x)any(x,1)));
h_out = double(replaceLinesByFunc(si.LRTLE.SpMatrixW.flip.ttest.SAvgS_node(thetaInd).h(ind)' == 1,indPara,1,@(x)any(x,1)));
h_in(h_in==0)=NaN; h_out(h_out==0)=NaN;
hFDR_in  = double(hEf_in & replaceLinesByFunc(si.LRTLE.SpMatrixW.flip.ttest.SAvgR_node(thetaInd).hFDR(ind)',indPara,1,@(x)any(x,1)));
hFDR_out = double(hEf_out & replaceLinesByFunc(si.LRTLE.SpMatrixW.flip.ttest.SAvgS_node(thetaInd).hFDR(ind)',indPara,1,@(x)any(x,1)));
hFDR_in(hFDR_in==0)=NaN; hFDR_out(hFDR_out==0)=NaN;
h_in_CT  = double(replaceLinesByFunc(si.LRTLE.SpMatrixW.flip.ttest.SAvgR_CT_node(thetaInd).h(ind)' == 1,indPara,1,@(x)any(x,1)));
h_out_CT = double(replaceLinesByFunc(si.LRTLE.SpMatrixW.flip.ttest.SAvgS_CT_node(thetaInd).h(ind)' == 1,indPara,1,@(x)any(x,1)));
h_in_CT(h_in_CT==0)=NaN; h_out_CT(h_out_CT==0)=NaN;
hFDR_in_CT  = double(hEf_in & replaceLinesByFunc(si.LRTLE.SpMatrixW.flip.ttest.SAvgR_CT_node(thetaInd).hFDR(ind)',indPara,1,@(x)any(x,1)));
hFDR_out_CT = double(hEf_out & replaceLinesByFunc(si.LRTLE.SpMatrixW.flip.ttest.SAvgS_CT_node(thetaInd).hFDR(ind)',indPara,1,@(x)any(x,1)));
hFDR_in_CT(hFDR_in_CT==0)=NaN; hFDR_out_CT(hFDR_out_CT==0)=NaN;
h_in_HV  = double(replaceLinesByFunc(si.LRTLE.SpMatrixW.flip.ttest.SAvgR_HV_node(thetaInd).h(ind)' == 1,indPara,1,@(x)any(x,1)));
h_out_HV = double(replaceLinesByFunc(si.LRTLE.SpMatrixW.flip.ttest.SAvgS_HV_node(thetaInd).h(ind)' == 1,indPara,1,@(x)any(x,1)));
h_in_HV(h_in_HV==0)=NaN; h_out_HV(h_out_HV==0)=NaN;
hFDR_in_HV  = double(hEf_in & replaceLinesByFunc(si.LRTLE.SpMatrixW.flip.ttest.SAvgR_HV_node(thetaInd).hFDR(ind)',indPara,1,@(x)any(x,1)));
hFDR_out_HV = double(hEf_out & replaceLinesByFunc(si.LRTLE.SpMatrixW.flip.ttest.SAvgS_HV_node(thetaInd).hFDR(ind)',indPara,1,@(x)any(x,1)));
hFDR_in_HV(hFDR_in_HV==0)=NaN; hFDR_out_HV(hFDR_out_HV==0)=NaN;
hEf_in(hEf_in==0)=NaN; hEf_out(hEf_out==0)=NaN;

k(isnan(k))=1;
[~,xLab] = shrinkStrByCapLetters( cellfun(@(x)x{1},cellfun(@(x)strsplit(x,'_'),lab(k),'UniformOutput',false),'UniformOutput',false),3); % xLab = cellfun(@(x)x{1},cellfun(@(x)strsplit(x,'_'),lab(k),'UniformOutput',false),'UniformOutput',false);

fh1 = figure;
ax = axes('Position',[0.2594 0.1316 0.5003 0.3334]);
y = getLineOfVar(spTime_in,spTime_out);
bp = bar(ax,1:numel(xLab),y,1);
hold(ax,'on');
errorbar(ax,bp(1).XData-bp(1).BarWidth/8,bp(1).YData,spTimeStd_in,'+k','HandleVisibility','off','LineWidth',2)
errorbar(ax,bp(2).XData+bp(2).BarWidth/8,bp(2).YData,spTimeStd_out,'+k','HandleVisibility','off','LineWidth',2)
bp(1).FaceColor = fp.pColors(9,:);
bp(2).FaceColor = fp.pColors(7,:);
ax.XTickLabel = xLab;
ax.FontSize = 16;
ylabel(ax,'S (Z-score)');
text(ax,(bp(1).XData-bp(1).BarWidth/8).*(h_in'),(bp(1).YData+(spTimeStd_in')).*(h_in'),'+','HorizontalAlignment','right','VerticalAlignment','bottom','FontSize',14)
text(ax,(bp(1).XData-bp(1).BarWidth/8).*(hFDR_in'),(bp(1).YData+(spTimeStd_in')).*(hFDR_in'),'*','HorizontalAlignment','left','VerticalAlignment','bottom','FontSize',18)
text(ax,(bp(2).XData+bp(2).BarWidth/8).*(h_out'),(bp(2).YData+(spTimeStd_out')).*(h_out'),'+','HorizontalAlignment','right','VerticalAlignment','bottom','FontSize',14)
text(ax,(bp(2).XData+bp(2).BarWidth/8).*(hFDR_out'),(bp(2).YData+(spTimeStd_out')).*(hFDR_out'),'*','HorizontalAlignment','left','VerticalAlignment','bottom','FontSize',18)
ax.YLim = [0,1];
legend(ax,{'In','Out'},'Box','off','FontSize',10)
fn1 = 'bar_sptime_inout_mtl';
fh1 = cropFigure(fh1,10);

fh2 = figure;
ax = axes('Position',[0.2594 0.1316 0.5003 0.3334]);
y = getLineOfVar(efSz_in,efSz_out);
bp = bar(ax,1:numel(xLab),y,1);
hold(ax,'on');
bp(1).FaceColor = fp.pColors(9,:);
bp(2).FaceColor = fp.pColors(7,:);
ax.XTickLabel = xLab;
ax.FontSize = 16;
ylabel(ax,'Effect size, |d|');
% text(ax,(bp(1).XData-bp(1).BarWidth/8).*(h_in'),(bp(1).YData).*(h_in'),'+','HorizontalAlignment','right','VerticalAlignment','bottom','FontSize',14)
text(ax,(bp(1).XData-bp(1).BarWidth/8).*(hFDR_in'),(bp(1).YData).*(hFDR_in'),'*','HorizontalAlignment','left','VerticalAlignment','bottom','FontSize',18)
% text(ax,(bp(2).XData+bp(2).BarWidth/8).*(h_out'),(bp(2).YData).*(h_out'),'+','HorizontalAlignment','right','VerticalAlignment','bottom','FontSize',14)
text(ax,(bp(2).XData+bp(2).BarWidth/8).*(hFDR_out'),(bp(2).YData).*(hFDR_out'),'*','HorizontalAlignment','left','VerticalAlignment','bottom','FontSize',18)
ax.YLim = [0,1.5];
legend(ax,{'In','Out'},'Box','off','FontSize',10)
fn2 = 'bar_efsz_inout_mtl';
fh2 = cropFigure(fh2,10);

fh3 = figure;
ax = axes('Position',[0.2594 0.1316 0.5003 0.3334]);
y = getLineOfVar(efSz_in,efSz_out);
bp = bar(ax,1:numel(xLab),y,1);
hold(ax,'on');
bp(1).FaceColor = fp.pColors(9,:);
bp(2).FaceColor = fp.pColors(7,:);
ax.XTickLabel = xLab;
ax.FontSize = 16;
ylabel(ax,'Effect size, |d|');
% text(ax,(bp(1).XData-bp(1).BarWidth/8).*(h_in'),(bp(1).YData).*(h_in'),'+','HorizontalAlignment','right','VerticalAlignment','bottom','FontSize',14)
text(ax,(bp(1).XData-bp(1).BarWidth/8).*(hFDR_in_CT'),(bp(1).YData).*(hFDR_in_CT'),'*','HorizontalAlignment','left','VerticalAlignment','bottom','FontSize',18)
% text(ax,(bp(2).XData+bp(2).BarWidth/8).*(h_out'),(bp(2).YData).*(h_out'),'+','HorizontalAlignment','right','VerticalAlignment','bottom','FontSize',14)
text(ax,(bp(2).XData+bp(2).BarWidth/8).*(hFDR_out_CT'),(bp(2).YData).*(hFDR_out_CT'),'*','HorizontalAlignment','left','VerticalAlignment','bottom','FontSize',18)
ax.YLim = [0,1.5];
legend(ax,{'In','Out'},'Box','off','FontSize',10)
fn3 = 'bar_efsz_inout_mtl_CT';
fh3 = cropFigure(fh3,10);

fh4 = figure;
ax = axes('Position',[0.2594 0.1316 0.5003 0.3334]);
y = getLineOfVar(efSz_in,efSz_out);
bp = bar(ax,1:numel(xLab),y,1);
hold(ax,'on');
bp(1).FaceColor = fp.pColors(9,:);
bp(2).FaceColor = fp.pColors(7,:);
ax.XTickLabel = xLab;
ax.FontSize = 16;
ylabel(ax,'Effect size, |d|');
% text(ax,(bp(1).XData-bp(1).BarWidth/8).*(h_in'),(bp(1).YData).*(h_in'),'+','HorizontalAlignment','right','VerticalAlignment','bottom','FontSize',14)
text(ax,(bp(1).XData-bp(1).BarWidth/8).*(hFDR_in_HV'),(bp(1).YData).*(hFDR_in_HV'),'*','HorizontalAlignment','left','VerticalAlignment','bottom','FontSize',18)
% text(ax,(bp(2).XData+bp(2).BarWidth/8).*(h_out'),(bp(2).YData).*(h_out'),'+','HorizontalAlignment','right','VerticalAlignment','bottom','FontSize',14)
text(ax,(bp(2).XData+bp(2).BarWidth/8).*(hFDR_out_HV'),(bp(2).YData).*(hFDR_out_HV'),'*','HorizontalAlignment','left','VerticalAlignment','bottom','FontSize',18)
ax.YLim = [0,1.5];
legend(ax,{'In','Out'},'Box','off','FontSize',10)
fn4 = 'bar_efsz_inout_mtl_HV';
fh4 = cropFigure(fh4,10);

if saveOutputFigures
    saveFigure([fh1,fh2,fh3,fh4], fullfile(newOutputDir,{fn1,fn2,fn3,fn4}), 'tiff', true, [], 600);
end

%% plotting edges of effect sizes in patients edge debundle

cLimEffSz_max = max(cell2LinVec(getFieldsContents(si.LRTLE.SpMatrixW.flip.ttest,...
                         {'SAvgR_node','SAvgR_CT_node','SAvgR_HV_node','SAvgS_node','SAvgS_CT_node','SAvgS_HV_node'},...
                         thetaInd,effSizeLabel,{'hFDR','h'},'($h$>0) & ($hFDR$>0)')));
cLimEffSz_min = min(cell2LinVec(getFieldsContents(si.LRTLE.SpMatrixW.flip.ttest,...
                         {'SAvgR_node','SAvgR_CT_node','SAvgR_HV_node','SAvgS_node','SAvgS_CT_node','SAvgS_HV_node'},...
                         thetaInd,effSizeLabel,{'hFDR','h'},'($h$>0) & ($hFDR$>0)')));
cLimEffSz = getCLim0(cLimEffSz_max,cLimEffSz_min);

Gdb = import_edge_debundle_json('network_debundle\TLE_0362_1_edges_xy.debundle-json');
[~,~,~,aal] = aalsurfview(zeros(90,1));
AA = si.LRTLE.SpMatrixW.flip.ttest.SZ(thetaInd).Cohen_Mahal;
AA(~(si.LRTLE.SpMatrixW.flip.ttest.SZ(thetaInd).hFDR & (si.LRTLE.SpMatrixW.flip.ttest.SZ(thetaInd).Cohen_Mahal < 0.8))) = 0;
N = size(AA,1);
cMap = greenYellowPinkCMap(N*N);
% cMap = insertColorForVal(0,AA(:),[1,1,1],flipud(cMap),cMap,[],cLimEffSz,N*N);

% n = struct2table(Gdb.nodes);
% r = [n.x,n.y,zeros(size(n.x))];
[fh2, axh2, ~] = plotEdges([],[],aal.pos.AAL306,AA,cMap,'continuous',...
    {'MarkerSize',3,'Color','k','MarkerFaceColor','k'},...
    {'LineWidth',0.1,'EdgeAlpha',0.6},...
    'constant',1,[],[],[],Gdb,0,{'LineWidth',2,'EdgeColor',0.8.*ones(1,3)});
%     'constant',[],[],[],[],Gdb,[0,20,40],{'LineWidth',2,'EdgeColor','k'});
view(axh2,2);
daspect(axh2,[1,1,1]);
axis(axh2,'off');
